AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Simple CRUD webservice. State is stored in a SimpleTable (DynamoDB) resource.

Resources:
  #(01) get vehicle from gn-vehicle-table for unauthenticated users.
  GoNowGetPublicVehicleList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowGetPublicVehicleList
      Runtime: nodejs12.x
      CodeUri: go-now-get-public-vehicle-list/
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/public/vehicles
            Method: get

  #(02) delete vehicle from gn-vehicle-table
  GoNowDeleteVehicle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowDeleteVehicle
      Runtime: nodejs12.x
      CodeUri: go-now-delete-vehicle/
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles/{vehicleId}
            Method: delete

  #(03) get vehicle from gn-vehicle-table for authenticated users.
  GoNowGetPrivateVehicleList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowGetPrivateVehicleList
      Runtime: nodejs12.x
      CodeUri: go-now-get-private-vehicle-list/
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: get

  #(04) change vehicle details of hosted vehicle.
  GoNowPatchVehicle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowPatchVehicle
      Runtime: nodejs12.x
      CodeUri: go-now-patch-vehicle/
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles/{vehicleId}
            Method: patch

  #(05) create vehicle profile in the gn-vehicle-table
  GoNowHostVehicle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowHostVehicle
      Runtime: nodejs12.x
      CodeUri: go-now-host-vehicle/
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: post

  #(06) Create an entry for image triggered by GoNowVehicleImageBucket
  GoNowVehicleImageTrigger:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowVehicleImageTrigger
      Runtime: nodejs12.x
      CodeUri: go-now-vehicle-image-trigger/
      Policies: AmazonS3ReadOnlyAccess
      Events:
        PhotoUpload:
          Type: S3
          Properties:
            Bucket: !Ref GoNowVehicleImageBucket
            Events: s3:ObjectCreated:*

  #IAM::User
  #IAM User for the GoNowVehicleImageBucket
  MyUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: MYNEW1209PASSWORD
      UserName: GoNowImageManagementUser

  #s3
  #(01) create a S3 bucket for storing images of go now app.
  GoNowVehicleImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      #AccessControl: PublicRead
      BucketName: go-now-vehicle-image-bucket

  #Bucket policy for GoNowVehicleImageBucket
  SampleBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: "GoNowVehicleImageBucket"
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "GoNowVehicleImageBucket"
                  - "/*"
            Principal: "*"
            Condition:
              StringLike:
                aws:Referer:
                  - "http://www.example.com/*"
                  - "http://example.com/*"
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "GoNowVehicleImageBucket"
                  - "/*"
            Principal: "*"
            Condition:
              StringLike:
                aws:Referer:
                  - "http://www.example.com/*"
                  - "http://example.com/*"

  #DynamoDB Tables
  #(01) configure primary dynamodb table
  GoNowVehicleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "vehicleId"
          AttributeType: "S"
        - AttributeName: "hostId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "vehicleId"
          KeyType: "HASH"
        - AttributeName: "hostId"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "gn-vehicle-table"

  #Cognito
  #(01) Cognito user pool configuaration
  GoNowCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: GoNowCognitoUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  #Client for Cognito user pool
  GoNowCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref GoNowCognitoUserPool
      ClientName: GoNowCognitoUserPoolClient
      GenerateSecret: false

  #Identity Pool
  GoNowIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId:
            Ref: GoNowCognitoUserPoolClient
          ProviderName:
            Fn::GetAtt: ["GoNowCognitoUserPool", "ProviderName"]

  #Apigateway
  #(01) primary API for the Go Now app
  GoNowAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: GoNowAPI
      StageName: devStage
      Cors: "'*'"
