AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Simple CRUD webservice. State is stored in a SimpleTable (DynamoDB) resource.

#
#
#
Outputs:
  GoNowAPIUrl:
    Value: !Sub "https://${GoNowAPI}.execute-api.${AWS::Region}.amazonaws.com/${!GetAtt GoNowAPI.StageName}/"

  GoNowChatTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt GoNowChatTable.Arn

  GoNowChatOnConnectArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt GoNowChatOnConnect.Arn

  GoNowChatOnDisconnectArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt GoNowChatOnDisconnect.Arn

  GoNowChatSendMessageArn:
    Description: "SendMessage function ARN"
    Value: !GetAtt GoNowChatSendMessage.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref SimpleChatWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]

Parameters:
  EnvironmentParameter:
    Type: String
    Default: devStage
    AllowedValues:
      - devStage
      - prodStage
    Description: devStage, prodStage

#
#
#
Resources:

  #
  #
  #(01) get vehicle from gn-vehicle-table for unauthenticated users.
  GoNowGetPublicVehicleList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowGetPublicVehicleList
      Runtime: nodejs12.x
      CodeUri: go-now-get-public-vehicle-list/
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowBaseTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/public/vehicles
            Method: get
            RequestModel:
              Model: "SingleVehicleModel"
              Required: true

  #(02) delete vehicle from gn-vehicle-table
  GoNowDeleteVehicle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowDeleteVehicle
      Runtime: nodejs12.x
      CodeUri: go-now-delete-vehicle/
      Role: !GetAtt GoNowBasicDeleteLambdaRole.Arn
      #Policies:
        # Give DynamoDB Full Access to your Lambda Function
        #- AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowBaseTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles/{vehicleId}
            Method: delete

  #(03) get vehicle from gn-vehicle-table for authenticated users.
  GoNowGetPrivateVehicleList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowGetPrivateVehicleList
      Runtime: nodejs12.x
      CodeUri: go-now-get-private-vehicle-list/
      #Policies: AmazonS3ReadOnlyAccess
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowBaseTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: get

  #(04) change vehicle details of hosted vehicle.
  GoNowPatchVehicle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowPatchVehicle
      Runtime: nodejs12.x
      CodeUri: go-now-patch-vehicle/
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      #Policies:
        # Give DynamoDB Full Access to your Lambda Function
        #- AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowBaseTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles/{vehicleId}
            Method: patch

  #(05) create vehicle profile in the gn-vehicle-table
  GoNowHostVehicle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowHostVehicle
      Runtime: nodejs12.x
      CodeUri: go-now-host-vehicle/
      MemorySize: 384
      Timeout: 12
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      #Policies:
        # Give DynamoDB Full Access to your Lambda Function
        #- AmazonDynamoDBFullAccess
      Environment:
        Variables:
          BASE_TABLE_NAME: !Ref GoNowBaseTable
          LOCATION_TABLE_NAME: !Ref GoNowLocationTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: post

  #(06) Create an entry for image triggered by GoNowVehicleImageBucket
  GoNowVehicleImageTrigger:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowVehicleImageTrigger
      Runtime: nodejs12.x
      CodeUri: go-now-vehicle-image-trigger/
      Policies: AmazonS3ReadOnlyAccess
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowBaseTable
      Events:
        PhotoUpload:
          Type: S3
          Properties:
            Bucket: !Ref GoNowVehicleImageBucket
            Events: s3:ObjectCreated:*
  
  #(07) Create an entry for image triggered by GoNowVehicleImageBucket.
  GoNowPostWishlistItem:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowPostWishlistItem
      Runtime: nodejs12.x
      CodeUri: go-now-post-wishlist-item/
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      #Policies:
        # Give DynamoDB Full Access to your Lambda Function
        #- AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowBaseTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: post

  #(08) Create an entry for image triggered by GoNowVehicleImageBucket.
  GoNowPostRating:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowPostRating
      Runtime: nodejs12.x
      CodeUri: go-now-post-rating/
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      #Policies:
        # Give DynamoDB Full Access to your Lambda Function
        #- AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowBaseTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: post

  #(09) Create an entry for image triggered by GoNowVehicleImageBucket.
  GoNowPatchRating:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowPatchRating
      Runtime: nodejs12.x
      CodeUri: go-now-patch-rating/
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      #Policies:
        # Give DynamoDB Full Access to your Lambda Function
        #- AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowBaseTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: post
  
  #(10) Create an entry for image triggered by GoNowVehicleImageBucket.
  GoNowGetWishlist:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowGetWishlist
      Runtime: nodejs12.x
      CodeUri: go-now-get-wishlist/
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      #Policies:
        # Give DynamoDB Full Access to your Lambda Function
        #- AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowBaseTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: post
    
  #(11) Create an entry for image triggered by GoNowVehicleImageBucket.
  GoNowDeleteRating:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowDeleteRating
      Runtime: nodejs12.x
      CodeUri: go-now-delete-rating/
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      #Policies:
        # Give DynamoDB Full Access to your Lambda Function
        #- AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowBaseTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: post
  
  #(12) Create an entry for image triggered by GoNowVehicleImageBucket.
  GoNowDeleteWishlistItem:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowDeleteWishlistItem
      Runtime: nodejs12.x
      CodeUri: go-now-delete-wishlist-item/
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      #Policies:
        # Give DynamoDB Full Access to your Lambda Function
        #- AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowBaseTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: post

  #(13) Create connection to websocket. (GoNowChat Function 01)
  GoNowChatOnConnect:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: onconnect/
      Handler: app.onConnect
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowChatTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref GoNowChatTable
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GoNowChatOnConnect
      Principal: apigateway.amazonaws.com
      
  #(14) Disconnect from websocket. (GoNowChat Function 02)
  GoNowChatOnDisconnect:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: app.onDisconnect
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowChatTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref GoNowChatTable
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GoNowChatOnDisconnect
      Principal: apigateway.amazonaws.com
      
  #(15) Send message. (GoNowChat Function 03)
  GoNowChatSendMessage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendmessage/
      Handler: app.sendMessage
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowChatTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref GoNowChatTable
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GoNowChatSendMessage
      Principal: apigateway.amazonaws.com

  #
  #
  #IAM::User
  #IAM User for the GoNowVehicleImageBucket
  MyUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: MYNEW1209PASSWORD
      UserName: GoNowImageManagementUser

  #
  #
  #IAM:Role
  #grant read and write GoNowBaseTable dynamodb table for lambda.
  GoNowBasicReadWriteLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "GoNowBasicReadWriteDynamodbPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:ConditionCheckItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTimeToLive"
                  - "dynamodb:GetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource: 
                  
                  - !GetAtt GoNowLocationTable.Arn
                  - !Join [ '', [ !GetAtt GoNowLocationTable.Arn, '/*'] ]
                  - !Join [ '', [ !GetAtt GoNowLocationTable.Arn, '/index/'] ]
                  - !Join [ '', [ !GetAtt GoNowLocationTable.Arn, '/index/*'] ]

                  - !GetAtt GoNowBaseTable.Arn
                  - !Join [ '', [ !GetAtt GoNowBaseTable.Arn, '/*'] ]
                  - !Join [ '', [ !GetAtt GoNowBaseTable.Arn, '/index/'] ]
                  - !Join [ '', [ !GetAtt GoNowBaseTable.Arn, '/index/*'] ]

#${GoNowChatOnDisconnect.Arn}/invocations
  #grant read and delete GoNowBaseTable dynamodb table item for lambda.
  GoNowBasicDeleteLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "GoNowBasicDeleteDynamodbPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                Resource: 
                  
                  - !GetAtt GoNowLocationTable.Arn
                  - !Join [ '', [ !GetAtt GoNowLocationTable.Arn, '/*'] ]
                  - !Join [ '', [ !GetAtt GoNowLocationTable.Arn, '/index/'] ]
                  - !Join [ '', [ !GetAtt GoNowLocationTable.Arn, '/index/*'] ]

                  - !GetAtt GoNowBaseTable.Arn
                  - !Join [ '', [ !GetAtt GoNowBaseTable.Arn, '/*'] ]
                  - !Join [ '', [ !GetAtt GoNowBaseTable.Arn, '/index/'] ]
                  - !Join [ '', [ !GetAtt GoNowBaseTable.Arn, '/index/*'] ]

  #
  #
  #s3
  #(01) create a S3 bucket for storing images of go now app.
  GoNowVehicleImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      #AccessControl: PublicRead
      BucketName: go-now-vehicle-image-bucket

  #Bucket policy for GoNowVehicleImageBucket
  GoNowVehicleImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: "GoNowVehicleImageBucket"
      PolicyDocument:
        Statement:
          - Action:
              - "s3:*"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "GoNowVehicleImageBucket"
                  - ""
            Principal:
              AWS: "arn:aws:iam::932203614124:user/gn_img_user"
            Condition:
              StringLike:
                s3:prefix: "${cognito-identity.amazonaws.com}/*"
          #
          - Action:
              - "s3:*"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "GoNowVehicleImageBucket"
                  - "/${cognito-identity.amazonaws.com}/*"
            Principal:
              AWS: "arn:aws:iam::932203614124:user/gn_img_user"

  #
  #
  #DynamoDB Tables
  #(01) configure primary dynamodb table
  GoNowBaseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "GoNowBaseTable"

  #(02) configure location table for GoNow app.
  GoNowLocationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "N"
        - AttributeName: "SK"
          AttributeType: "S"
        - AttributeName: "LSI_01"
          AttributeType: "N"
      LocalSecondaryIndexes: 
      - IndexName: "LSI_LOCA_01"
        KeySchema: 
          - AttributeName: "PK"
            KeyType: "HASH"
          - AttributeName: "LSI_01"
            KeyType: "RANGE"
        Projection:
          ProjectionType: "ALL"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "GoNowLocationTable"

  #(03) configure chat table
  GoNowChatTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "PK"
        AttributeType: "S"
      - AttributeName: "SK"
        AttributeType: "S"
      - AttributeName: "connectionUserId"
        AttributeType: "S"
      - AttributeName: "connectionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "PK"
        KeyType: "HASH"
      - AttributeName: "SK"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: "GoNowChatTable"
      GlobalSecondaryIndexes:
      - IndexName: "GSI_01"
        KeySchema:
          - AttributeName: "connectionUserId"
            KeyType: "HASH"
          - AttributeName: "connectionId"
            KeyType: "RANGE"
        Projection:
          ProjectionType: "KEYS_ONLY"
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'


  #
  #
  #Cognito
  #(01) Cognito user pool configuaration
  GoNowCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: GoNowCognitoUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  #Client for Cognito user pool
  GoNowCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref GoNowCognitoUserPool
      ClientName: GoNowCognitoUserPoolClient
      GenerateSecret: false

  #Identity Pool
  GoNowIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId:
            Ref: GoNowCognitoUserPoolClient
          ProviderName:
            Fn::GetAtt: ["GoNowCognitoUserPool", "ProviderName"]

  #
  #
  #Apigateway
  #(01) primary API for the Go Now app
  GoNowAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: GoNowAPI
      StageName: !Ref EnvironmentParameter
      Cors: "'*'"
      DefinitionBody:
        "Fn::Transform":
          Name: "AWS::Include"
          # Replace <bucket> with your bucket name
          Parameters:
            Location: !Join ["", ["s3://gn-s3-repo", "/GoNowAPI/GoNowAPI.yaml"]]
      GatewayResponses:
        MISSING_AUTHENTICATION_TOKEN:
          StatusCode: 405
          ResponseTemplates:
            "application/json": '{ "message": "Method Not Allowed" }'
      Auth:
        Authorizers:
          GoNowCognitoAPIAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
                - GoNowCognitoUserPool
                - Arn
            AuthType: "COGNITO_USER_POOLS"
        DefaultAuthorizer: GoNowCognitoAPIAuthorizer
        InvokeRole: CALLER_CREDENTIALS
        AddDefaultAuthorizerToCorsPreflight: false
        ApiKeyRequired: false
      Models:
        #Model for vehicle.
        SingleVehicleModel:
          type: object
          properties:
            vehicleId:
              type: string
            hostId:
              type: string
            hostName:
              type: string
            hostPhoneNumber:
              type: string
            vehicleName:
              type: string
            vehicleType:
              type: string
            vehicleNumOfSeats:
              type: integer
            vehicleKmPerL:
              type: number
            vehicleDayPrice:
              type: number
            vehiclePickupLocation:
              type: string
            vehicleReturnLocation:
              type: string
            vehicleAvaliableStartDate:
              type: string
            vehicleAvaliableEndDate:
              type: string
            vehicleDescription:
              type: string
            vehicleRegNumber:
              type: string
            isVehicleFavourite:
              type: boolean
            vehicleTag1:
              type: string
            vehicleTag2:
              type: string
            vehicleTag3:
              type: string
            vehicleProfileImageUrl:
              type: string
            vehicleImageUrl1:
              type: string
            vehicleImageUrl2:
              type: string
            vehicleImageUrl3:
              type: string
            vehicleAvailability:
              type: boolean
            vehicleTripId:
              type: string

        #Array for vehicle.
        VehicleListAray:
          type: array
          properties:
            vehicleId:
              type: string
            hostId:
              type: string
            hostName:
              type: string
            hostPhoneNumber:
              type: string
            vehicleName:
              type: string
            vehicleType:
              type: string
            vehicleNumOfSeats:
              type: integer
            vehicleKmPerL:
              type: number
            vehicleDayPrice:
              type: number
            vehiclePickupLocation:
              type: string
            vehicleReturnLocation:
              type: string
            vehicleAvaliableStartDate:
              type: string
            vehicleAvaliableEndDate:
              type: string
            vehicleDescription:
              type: string
            vehicleRegNumber:
              type: string
            isVehicleFavourite:
              type: boolean
            vehicleTag1:
              type: string
            vehicleTag2:
              type: string
            vehicleTag3:
              type: string
            vehicleProfileImageUrl:
              type: string
            vehicleImageUrl1:
              type: string
            vehicleImageUrl2:
              type: string
            vehicleImageUrl3:
              type: string
            vehicleAvailability:
              type: boolean
            vehicleTripId:
              type: string

  #Resources for GoNowChat feature
  #GoNowAPI
  SimpleChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: GoNowChatAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"

  #(Route 01)
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GoNowChatOnConnect.Arn}/invocations
      
  #(Route 02)
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GoNowChatOnDisconnect.Arn}/invocations
      
  #(Route 03)
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GoNowChatSendMessage.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref SimpleChatWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleChatWebSocket
