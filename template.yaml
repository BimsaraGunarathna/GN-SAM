AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Simple CRUD webservice. State is stored in a SimpleTable (DynamoDB) resource.

Outputs:

  GoNowAPIUrl:
    Value: !Sub "https://${GoNowAPI}.execute-api.${AWS::Region}.amazonaws.com/${!GetAtt GoNowAPI.StageName}/"

Resources:
  #
  #
  #(01) get vehicle from gn-vehicle-table for unauthenticated users.
  GoNowGetPublicVehicleList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowGetPublicVehicleList
      Runtime: nodejs12.x
      CodeUri: go-now-get-public-vehicle-list/
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowVehicleTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/public/vehicles
            Method: get
            RequestModel:
              Model: "SingleVehicleModel"
              Required: true

  #(02) delete vehicle from gn-vehicle-table
  GoNowDeleteVehicle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowDeleteVehicle
      Runtime: nodejs12.x
      CodeUri: go-now-delete-vehicle/
      Role: !GetAtt GoNowBasicDeleteLambdaRole.Arn
      Policies:
        # Give DynamoDB Full Access to your Lambda Function
        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowVehicleTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles/{vehicleId}
            Method: delete

  #(03) get vehicle from gn-vehicle-table for authenticated users.
  GoNowGetPrivateVehicleList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowGetPrivateVehicleList
      Runtime: nodejs12.x
      CodeUri: go-now-get-private-vehicle-list/
      Policies: AmazonS3ReadOnlyAccess
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowVehicleTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: get

  #(04) change vehicle details of hosted vehicle.
  GoNowPatchVehicle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowPatchVehicle
      Runtime: nodejs12.x
      CodeUri: go-now-patch-vehicle/
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      Policies:
        # Give DynamoDB Full Access to your Lambda Function
        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowVehicleTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles/{vehicleId}
            Method: patch

  #(05) create vehicle profile in the gn-vehicle-table
  GoNowHostVehicle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowHostVehicle
      Runtime: nodejs12.x
      CodeUri: go-now-host-vehicle/
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      Policies:
        # Give DynamoDB Full Access to your Lambda Function
        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowVehicleTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref GoNowAPI
            Path: /v1.0.0/private/vehicles
            Method: post

  #(06) Create an entry for image triggered by GoNowVehicleImageBucket
  GoNowVehicleImageTrigger:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.goNowVehicleImageTrigger
      Runtime: nodejs12.x
      CodeUri: go-now-vehicle-image-trigger/
      Policies: AmazonS3ReadOnlyAccess
      Role: !GetAtt GoNowBasicReadWriteLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref GoNowVehicleTable
      Events:
        PhotoUpload:
          Type: S3
          Properties:
            Bucket: !Ref GoNowVehicleImageBucket
            Events: s3:ObjectCreated:*

  #
  #
  #IAM::User
  #IAM User for the GoNowVehicleImageBucket
  MyUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: MYNEW1209PASSWORD
      UserName: GoNowImageManagementUser

  #
  #
  #IAM:Role
  #grant read and write GoNowVehicleTable dynamodb table for lambda.
  GoNowBasicReadWriteLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "GoNowBasicReadWriteDynamodbPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:ConditionCheckItem"
                  - "dynamodb:DescribeStream"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt GoNowVehicleTable.Arn
  #                Fn::Join:
  #                  - ""
  #                  - - "arn:aws:dynamodb:"
  #                    - Ref: "GoNowVehicleTable"
  #                    - ""

  #grant read and delete GoNowVehicleTable dynamodb table item for lambda.
  GoNowBasicDeleteLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "GoNowBasicDeleteDynamodbPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                Resource: !GetAtt GoNowVehicleTable.Arn

  #
  #
  #s3
  #(01) create a S3 bucket for storing images of go now app.
  GoNowVehicleImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      #AccessControl: PublicRead
      BucketName: go-now-vehicle-image-bucket

  #Bucket policy for GoNowVehicleImageBucket
  GoNowVehicleImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: "GoNowVehicleImageBucket"
      PolicyDocument:
        Statement:
          - Action:
              - "s3:*"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "GoNowVehicleImageBucket"
                  - ""
            Principal:
              AWS: "arn:aws:iam::932203614124:user/gn_img_user"
            Condition:
              StringLike:
                s3:prefix: "${cognito-identity.amazonaws.com}/*"
          #
          - Action:
              - "s3:*"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "GoNowVehicleImageBucket"
                  - "/${cognito-identity.amazonaws.com}/*"
            Principal:
              AWS: "arn:aws:iam::932203614124:user/gn_img_user"

  #
  #
  #DynamoDB Tables
  #(01) configure primary dynamodb table
  GoNowVehicleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "vehicleId"
          AttributeType: "S"
        - AttributeName: "hostId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "vehicleId"
          KeyType: "HASH"
        - AttributeName: "hostId"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "gn-vehicle-table"
  
  #
  #
  #Cognito
  #(01) Cognito user pool configuaration
  GoNowCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: GoNowCognitoUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  #Client for Cognito user pool
  GoNowCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref GoNowCognitoUserPool
      ClientName: GoNowCognitoUserPoolClient
      GenerateSecret: false

  #Identity Pool
  GoNowIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId:
            Ref: GoNowCognitoUserPoolClient
          ProviderName:
            Fn::GetAtt: ["GoNowCognitoUserPool", "ProviderName"]

  #
  #
  #Apigateway
  #(01) primary API for the Go Now app
  GoNowAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: GoNowAPI
      StageName: devStage
      Cors: "'*'"
      DefinitionBody:
            swagger: 2.0
            info:
              title:
                Ref: AWS::StackName
            paths:
              "/get":
                get:
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws
                    uri:
                      Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GoNowDeleteVehicle.Arn}/invocations
                  responses: {}
      GatewayResponses:
        MISSING_AUTHENTICATION_TOKEN:
          StatusCode: 405
          ResponseTemplates:
            "application/json": '{ "message": "Method Not Allowed" }'
      Auth:
        Authorizers:
          GoNowCognitoAPIAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
                - GoNowCognitoUserPool
                - Arn
            AuthType: "COGNITO_USER_POOLS"
        DefaultAuthorizer: GoNowCognitoAPIAuthorizer
        InvokeRole: CALLER_CREDENTIALS
        AddDefaultAuthorizerToCorsPreflight: false
        ApiKeyRequired: false
      Models:
        #Model for vehicle.
        SingleVehicleModel:
          type: object
          properties:
            vehicleId:
              type: string
            hostId:
              type: string
            hostName:
              type: string
            hostPhoneNumber:
              type: string
            vehicleName:
              type: string
            vehicleType:
              type: string
            vehicleNumOfSeats:
              type: integer
            vehicleKmPerL:
              type: number
            vehicleDayPrice:
              type: number
            vehiclePickupLocation:
              type: string
            vehicleReturnLocation:
              type: string
            vehicleAvaliableStartDate:
              type: string
            vehicleAvaliableEndDate:
              type: string
            vehicleDescription:
              type: string
            vehicleRegNumber:
              type: string
            isVehicleFavourite:
              type: boolean
            vehicleTag1:
              type: string
            vehicleTag2:
              type: string
            vehicleTag3:
              type: string
            vehicleProfileImageUrl:
              type: string
            vehicleImageUrl1:
              type: string
            vehicleImageUrl2:
              type: string
            vehicleImageUrl3:
              type: string
            vehicleAvailability:
              type: boolean
            vehicleTripId:
              type: string

        #Array for vehicle.
        VehicleListAray:
          type: array
          properties:
            vehicleId:
              type: string
            hostId:
              type: string
            hostName:
              type: string
            hostPhoneNumber:
              type: string
            vehicleName:
              type: string
            vehicleType:
              type: string
            vehicleNumOfSeats:
              type: integer
            vehicleKmPerL:
              type: number
            vehicleDayPrice:
              type: number
            vehiclePickupLocation:
              type: string
            vehicleReturnLocation:
              type: string
            vehicleAvaliableStartDate:
              type: string
            vehicleAvaliableEndDate:
              type: string
            vehicleDescription:
              type: string
            vehicleRegNumber:
              type: string
            isVehicleFavourite:
              type: boolean
            vehicleTag1:
              type: string
            vehicleTag2:
              type: string
            vehicleTag3:
              type: string
            vehicleProfileImageUrl:
              type: string
            vehicleImageUrl1:
              type: string
            vehicleImageUrl2:
              type: string
            vehicleImageUrl3:
              type: string
            vehicleAvailability:
              type: boolean
            vehicleTripId:
              type: string
  
  ################################
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "my-api"
      Description: "My API"
  



